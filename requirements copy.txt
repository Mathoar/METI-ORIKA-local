<!DOCTYPE html>
<html>
<head>
    <title>Analyse Commande</title>
    <meta charset="UTF-8">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
</head>
<body>
<div class="container mt-4">
    <h1>Analyse des Commandes</h1>

    {% with messages = get_flashed_messages(with_categories=true) %}
      {% if messages %}
        {% for category, message in messages %}
          <div class="alert alert-{{ category }}" role="alert">
            {{ message }}
          </div>
        {% endfor %}
      {% endif %}
    {% endwith %}

    <!-- Bouton Proposer -->
    <div class="mb-3">
        <button id="proposer-btn" class="btn btn-success">Proposer des commandes</button>
    </div>

    <form method="GET" action="{{ url_for('analyse_cde.analyse_commande') }}">
        <div class="form-row mb-3">
            <div class="col-md-3 mb-2">
                <input type="text" name="libelle_article" class="form-control"
                       placeholder="Rechercher un article..." value="{{ request.args.get('libelle_article','') }}">
            </div>
            <div class="col-md-3 mb-2">
                <input type="text" name="code_article" class="form-control"
                       placeholder="Rechercher un code article..." value="{{ request.args.get('code_article','') }}">
            </div>
            <div class="col-md-3 mb-2">
                <select name="nom_fournisseur" class="form-control">
                    <option value="">Fournisseur</option>
                    {% for val in fournisseurs %}
                        <option value="{{ val }}" {% if request.args.get('nom_fournisseur')==val %}selected{% endif %}>
                            {{ val }}
                        </option>
                    {% endfor %}
                </select>
            </div>
            <div class="col-md-3 mb-2">
                <select name="libelle_departement" class="form-control">
                    <option value="">Département</option>
                    {% for val in departements %}
                        <option value="{{ val }}" {% if request.args.get('libelle_departement')==val %}selected{% endif %}>
                            {{ val }}
                        </option>
                    {% endfor %}
                </select>
            </div>
            <div class="col-md-3 mb-2">
                <select name="libelle_rayon" class="form-control">
                    <option value="">Rayon</option>
                    {% for val in rayons %}
                        <option value="{{ val }}" {% if request.args.get('libelle_rayon')==val %}selected{% endif %}>
                            {{ val }}
                        </option>
                    {% endfor %}
                </select>
            </div>
            <div class="col-md-3 mb-2">
                <select name="libelle_famille" class="form-control">
                    <option value="">Famille</option>
                    {% for val in familles %}
                        <option value="{{ val }}" {% if request.args.get('libelle_famille')==val %}selected{% endif %}>
                            {{ val }}
                        </option>
                    {% endfor %}
                </select>
            </div>
            <div class="col-md-3 mb-2">
                <select name="libelle_sous_famille" class="form-control">
                    <option value="">Sous-famille</option>
                    {% for val in sous_familles %}
                        <option value="{{ val }}" {% if request.args.get('libelle_sous_famille')==val %}selected{% endif %}>
                            {{ val }}
                        </option>
                    {% endfor %}
                </select>
            </div>
            <div class="col-md-12 mb-3">
                <label for="colonnes">Colonnes à afficher :</label>
                <select name="colonnes" id="colonnes" multiple class="form-control select2">
                    {% for col in colonnes_standards + colonnes_optionnelles %}
                        <option value="{{ col }}" {% if col in selected_columns %}selected{% endif %}>
                            {{ col.replace('_',' ').capitalize() }}
                        </option>
                    {% endfor %}
                </select>
                <small class="form-text text-muted">
                    Utilisez Ctrl/Cmd + clic pour sélectionner plusieurs colonnes.
                </small>
            </div>
            <div class="col-md-3 mb-2">
                <div class="btn-group">
                    <button type="submit" class="btn btn-primary">Valider</button>
                    <a href="{{ url_for('analyse_cde.analyse_commande') }}" class="btn btn-secondary">
                        Réinitialiser
                    </a>
                </div>
            </div>
        </div>
    </form>

    {% if analyse_cde_rows %}
    <table class="table table-bordered table-sm">
        <thead class="thead-light">
        <tr>
            {% for col in selected_columns %}
                <th>{{ col.replace('_',' ').capitalize() }}</th>
            {% endfor %}
        </tr>
        </thead>
        <tbody>
        {% for row in analyse_cde_rows %}
            <tr>
                {% for cell in row %}
                    <td>{{ cell }}</td>
                {% endfor %}
            </tr>
        {% endfor %}
        </tbody>
    </table>

    <nav aria-label="Pagination">
        <form method="GET" action="{{ url_for('analyse_cde.analyse_commande') }}" class="form-inline justify-content-center mt-3">
            {% for key, values in request.args.lists() %}
                {% if key != 'page' %}
                    {% for value in values %}
                        <input type="hidden" name="{{ key }}" value="{{ value }}">
                    {% endfor %}
                {% endif %}
            {% endfor %}

            <div class="btn-group mr-2">
                {% if page > 1 %}
                    <button type="submit" name="page" value="{{ page - 1 }}" class="btn btn-outline-primary">←</button>
                {% else %}
                    <button type="button" class="btn btn-outline-secondary" disabled>←</button>
                {% endif %}
            </div>
            <span class="mx-2 align-self-center">Page</span>
            <input type="number" name="page" min="1" max="{{ total_pages }}" value="{{ page }}" class="form-control form-control-sm mx-1" style="width: 70px;">
            <span class="mx-2 align-self-center">sur {{ total_pages }}</span>
            <div class="btn-group ml-2">
                {% if page < total_pages %}
                    <button type="submit" name="page" value="{{ page + 1 }}" class="btn btn-outline-primary">→</button>
                {% else %}
                    <button type="button" class="btn btn-outline-secondary" disabled>→</button>
                {% endif %}
            </div>
        </form>
    </nav>

    {% else %}
    <div class="alert alert-warning">Aucune donnée trouvée pour les filtres appliqués.</div>
    {% endif %}
</div>

<script>
    $(document).ready(function() {
        $('.select2').select2({
            width: '100%',
            placeholder: "Colonnes à afficher"
        });

        $("#proposer-btn").click(function() {
            fetch("/analyse/proposer", {
                method: "POST"
            }).then(response => response.json())
              .then(data => {
                  alert("Proposition terminée : " + data.nb_lignes + " lignes insérées.");
                  location.reload();
              });
        });
    });
</script>
</body>
</html>

from flask import Blueprint, request, jsonify, render_template
from services.analyse_cde import get_analyse_cde_data, inserer_donnees_analyse_cde

analyse_cde_bp = Blueprint('analyse_cde', __name__)

@analyse_cde_bp.route("/", methods=["GET"])
def analyse_commande():
    data = get_analyse_cde_data(request)
    return render_template("analyse_commande.html", **data)

@analyse_cde_bp.route("/proposer", methods=["POST"])
def proposer_commandes():
    result = inserer_donnees_analyse_cde()
    return jsonify(result)

@analyse_cde_bp.route("/data", methods=["GET"])
def get_data():
    df = get_analyse_cde_data(request)

    filters = {
        "libelle_article": request.args.get("libelle_article", "").lower(),
        "code_article": request.args.get("code_article", "").lower(),
        "module": request.args.get("module", "").lower(),
        "libelle_departement": request.args.get("libelle_departement", "").lower(),
        "libelle_rayon": request.args.get("libelle_rayon", "").lower(),
        "libelle_famille": request.args.get("libelle_famille", "").lower(),
        "libelle_sous_famille": request.args.get("libelle_sous_famille", "").lower(),
        "code_marque": request.args.get("code_marque", "").lower(),
        "fournisseur": request.args.get("fournisseur", "").lower(),
        "pcb_commandable": request.args.get("pcb_commandable", "").upper()
    }

    df_rows = df.get("analyse_cde_rows", [])
    selected_columns = df.get("selected_columns", [])

    filtered_data = []
    for row in df_rows:
        match = True
        for key, val in filters.items():
            if val and val not in str(row.get(key, "")).lower():
                match = False
                break
        if match:
            filtered_data.append({k: row.get(k, "") for k in selected_columns})

    return jsonify(filtered_data)
# services/analyse_cde.py

import sqlite3
import logging
import pandas as pd
from flask import request

logger = logging.getLogger(__name__)

def get_db_path():
    return "/Users/mhoar/Desktop/python_vscode/price_comparison.db"

def get_analyse_cde_data(request):
    filters = []
    params = []

    libelle_article_filter = request.args.get('libelle_article', '').strip()
    code_article_filter = request.args.get('code_article', '').strip()
    nom_fournisseur_filter = request.args.get('nom_fournisseur', '').strip()
    libelle_departement_filter = request.args.get('libelle_departement', '').strip()
    libelle_rayon_filter = request.args.get('libelle_rayon', '').strip()
    libelle_famille_filter = request.args.get('libelle_famille', '').strip()
    libelle_sous_famille_filter = request.args.get('libelle_sous_famille', '').strip()

    page = int(request.args.get('page', 1))
    per_page = 50
    offset = (page - 1) * per_page

    colonnes_standards = [
        'code_article', 'libelle_article', 'qte', 'ca', 'ca_ht', 'annee', 'nb_semaine',
        'nom_fournisseur', 'libelle_departement', 'libelle_rayon', 'libelle_famille',
        'libelle_sous_famille', 'ean', 'libelle_marque', 'prix_tarif', 'prix_de_vente',
        'code_tva', 'pcb', 'date_derniere_commande', 'commandable', 'marge', 'module',
        'pcb_mini_commandable', 'taux_tva', 'libelle_unite_de_besoin', 'svap_ttc',
        'pv_conseille', 'pcb_commandable', 'code_etat', 'dispo_sodex'
    ]

    selected_columns = request.args.getlist('colonnes') or colonnes_standards

    try:
        with sqlite3.connect(get_db_path()) as conn:
            cursor = conn.cursor()

            cursor.execute("PRAGMA table_info(analyse_cde)")
            all_columns = [row[1] for row in cursor.fetchall()]
            colonnes_optionnelles = sorted([col for col in all_columns if col not in colonnes_standards])

            base_query = f"SELECT {', '.join(selected_columns)} FROM analyse_cde WHERE 1=1"
            count_query = "SELECT COUNT(*) FROM analyse_cde WHERE 1=1"

            if libelle_article_filter:
                filters.append(" AND libelle_article LIKE ?")
                params.append(f"%{libelle_article_filter}%")
            if code_article_filter:
                filters.append(" AND code_article = ?")
                params.append(code_article_filter)
            if nom_fournisseur_filter:
                filters.append(" AND TRIM(nom_fournisseur) = ?")
                params.append(nom_fournisseur_filter)
            if libelle_departement_filter:
                filters.append(" AND TRIM(libelle_departement) = ?")
                params.append(libelle_departement_filter)
            if libelle_rayon_filter:
                filters.append(" AND TRIM(libelle_rayon) = ?")
                params.append(libelle_rayon_filter)
            if libelle_famille_filter:
                filters.append(" AND TRIM(libelle_famille) = ?")
                params.append(libelle_famille_filter)
            if libelle_sous_famille_filter:
                filters.append(" AND TRIM(libelle_sous_famille) = ?")
                params.append(libelle_sous_famille_filter)

            cursor.execute(count_query + ''.join(filters), params)
            total_rows = cursor.fetchone()[0]
            total_pages = max(1, (total_rows + per_page - 1) // per_page)

            paginated_query = base_query + ''.join(filters) + " LIMIT ? OFFSET ?"
            cursor.execute(paginated_query, params + [per_page, offset])
            analyse_cde_rows = cursor.fetchall()

            def get_unique_values(column):
                dynamic_filters = list(filters)
                dynamic_params = list(params)
                if f" AND TRIM({column}) = ?" in dynamic_filters:
                    index = dynamic_filters.index(f" AND TRIM({column}) = ?")
                    dynamic_filters.pop(index)
                    dynamic_params.pop(index)
                query = f"SELECT DISTINCT TRIM({column}) FROM analyse_cde WHERE 1=1" + ''.join(dynamic_filters) + f" ORDER BY {column}"
                cursor.execute(query, dynamic_params)
                return [row[0] for row in cursor.fetchall() if row[0]]

            fournisseurs = get_unique_values("nom_fournisseur")
            codes_article = get_unique_values("code_article")
            departements = get_unique_values("libelle_departement")
            rayons = get_unique_values("libelle_rayon")
            familles = get_unique_values("libelle_famille")
            sous_familles = get_unique_values("libelle_sous_famille")

    except Exception as e:
        logger.error(f"Erreur chargement analyse commande : {e}")
        return {
            'analyse_cde_rows': [],
            'fournisseurs': [],
            'codes_article': [],
            'departements': [],
            'rayons': [],
            'familles': [],
            'sous_familles': [],
            'page': 1,
            'total_pages': 1,
            'colonnes_optionnelles': [],
            'selected_columns': colonnes_standards,
            'colonnes_standards': colonnes_standards  # <-- ajouté ici aussi pour fallback
        }

    return {
        'analyse_cde_rows': analyse_cde_rows,
        'fournisseurs': fournisseurs,
        'codes_article': codes_article,
        'departements': departements,
        'rayons': rayons,
        'familles': familles,
        'sous_familles': sous_familles,
        'page': page,
        'total_pages': total_pages,
        'colonnes_optionnelles': colonnes_optionnelles,
        'selected_columns': selected_columns,
        'colonnes_standards': colonnes_standards  # <-- essentiel pour le template
    }


def inserer_donnees_analyse_cde():
    try:
        with sqlite3.connect(get_db_path()) as conn:
            # Vente METI
            df_vente = pd.read_sql_query("""
                SELECT code_article, libelle_article, qte, ca, ca_ht, annee, nb_semaine FROM vente_meti
            """, conn)
            df_vente["code_etat"] = "Vente"

            # Rupture METI
            df_rupture = pd.read_sql_query("""
                SELECT generated_id AS code_article FROM rupture_meti
            """, conn)
            df_rupture = df_rupture.assign(
                libelle_article="", qte=0, ca=0, ca_ht=0, annee=2025, nb_semaine=1,
                code_etat="Rupture"
            )

            # Fournisseurs
            df_frs = pd.read_sql_query("SELECT * FROM ref_frs", conn)
            df_frs["article"] = df_frs["article"].astype(str)
            df_frs["libelle_article"] = df_frs["libelle_article"].fillna("")
            df_vente["code_article"] = df_vente["code_article"].astype(str)
            df_rupture["code_article"] = df_rupture["code_article"].astype(str)

            # Stock
            stock_codes = pd.read_sql_query("SELECT DISTINCT code_article FROM stock", conn)["code_article"].astype(str).tolist()

            # Fusion ventes + frs
            df_vente = df_vente.merge(df_frs, left_on="code_article", right_on="article", how="left")
            df_rupture = df_rupture.merge(df_frs, left_on="code_article", right_on="article", how="left")

            # Remplir les libellés manquants
            df_vente["libelle_article"] = df_vente["libelle_article_x"].combine_first(df_vente["libelle_article_y"])
            df_rupture["libelle_article"] = df_rupture["libelle_article_y"]

            # dispo_sodex
            def dispo(row):
                marque = row.get("code_marque", "")
                if marque == "MN":
                    return 3
                if marque in ("Inconnu", "", None):
                    return 0
                return 1 if row.get("code_article") in stock_codes else 0

            df_vente["dispo_sodex"] = df_vente.apply(dispo, axis=1)
            df_rupture["dispo_sodex"] = df_rupture.apply(dispo, axis=1)

            # Colonnes attendues
            colonnes = [
                "code_article", "libelle_article", "qte", "ca", "ca_ht", "annee", "nb_semaine",
                "fournisseur", "departement", "rayon", "famille", "sous_famille", "ean", "libelle_marque",
                "libelle_famille", "libelle_departement", "libelle_rayon", "libelle_sous_famille", "code_marque",
                "nom_fournisseur", "prix_tarif", "prix_de_vente", "code_tva", "pcb", "date_derniere_commande",
                "commandable", "marge", "module", "pcb_mini_commandable", "taux_tva", "libelle_unite_de_besoin",
                "svap_ttc", "pv_conseille", "pcb_commandable", "code_etat", "dispo_sodex"
            ]

            # Concat
            df_final = pd.concat([df_vente, df_rupture], ignore_index=True)

            # Ajout colonnes manquantes
            for col in colonnes:
                if col not in df_final.columns:
                    df_final[col] = ""

            # Réduction aux colonnes utiles
            df_final = df_final[colonnes].fillna("")
            df_final = df_final[df_final['pcb_commandable'].astype(str) == 'O']

            if df_final.empty:
                return {"status": "ok", "nb_lignes": 0, "message": "Aucune ligne après fusion"}

            df_final.to_sql("analyse_cde", conn, if_exists="replace", index=False)
            return {"status": "ok", "nb_lignes": len(df_final)}

    except Exception as e:
        return {"status": "error", "message": str(e)}


je souhaite améliorer la lecture pour l'utilisateur en proposant un affichage dynamique sur 
- FOurnisseur ou Unité de besoin 
l'idée est en fonction des données envoyées, l'utilisateur puisse choisir de voir les données par fournisseur ou par unité de besoin.
pour analyser ses ventes et passer sa commande rapidement
les données retourne déjà la liste des produits vendus, en ruptures et dipo
que me propose tu pour améliorer l'expérience utilisateur ?